{
  "hash": "046f265b696b4dcfabe8644ac0e8942a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clase práctica Semana 11\"\nauthor: \"Santiago Sotelo y Nadia Duffó\"\nformat: html\nexecute: \n  echo: true\n  message: false\ndf-print: paged\ncode-annotations: hover\n---\n\n\n\n\n::: callout-note\n## Material para el ejercicio\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente [enlace](https://downgit.github.io/#/home?url=https://github.com/aito123/CCO221_web/tree/master/semana11_material). No olvides unzipear el archivo.\n:::\n\n# Gráficar en R\n\nUsaremos el paquete ggplot 2 para generar distintos tipos de gráficos:\n-   Gráfico de barras\n-   Histograma\n-   Boxplot\n\nPrimero, preparamos todos los insumos que necesitaremos y ya conocemos (carga de paquetes, importación de data y tabulación de resultados)\n\n## Cargar paquetes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(rio, dplyr, ggplot2)\n```\n:::\n\n\n\n\n## Importación de data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- import(\"data/filmaffinity_dataset_limpio.xlsx\")\n```\n:::\n\n\n\n\n## Exploración de data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t119003 obs. of  9 variables:\n $ index     : num  0 1 2 3 4 5 6 7 8 9 ...\n $ Título    : chr  \"'49-'17\" \"10,000 Years B.C. (C)\" \"1812\" \"20.000 leguas de viaje submarino (C)\" ...\n $ Año       : num  1917 1916 1912 1907 1909 ...\n $ País      : chr  \"Estados Unidos\" \"Estados Unidos\" \"Rusia\" \"Francia\" ...\n $ Dirección : chr  \"Ruth Ann Baldwin\" \"Willis H. O'Brien\" \"Vasili Goncharov, Kai Hansen, Aleksandr Uralsky\" \"Georges Méliès\" ...\n $ Reparto   : chr  \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witting, George C. Pearce, Jean Hersholt, Donna Drew\" NA \"Pavel Knorr, Vasili Goncharov, Aleksandra Goncharova, Andrej Gromov, V. Serjozhinikov, A. Veskov\" \"Georges Méliès\" ...\n $ Nota      : num  NA 5.1 NA 6 5.3 NA 5.4 NA 4.6 NA ...\n $ Tipo filme: chr  \"Película\" \"Cortometraje\" \"Película\" \"Cortometraje\" ...\n $ Género    : chr  \"Western\" \"Comedia\" \"Drama\" \"Fantástico\" ...\n```\n\n\n:::\n:::\n\n\n\n\n## Gráfico de barras\n\n### ¿Qué variable podemos representar con un gráfico de barras?\n\nAntes de graficar, vamos a crear una tabla de frecuencias y porcentajes usando `count` y `mutate`, como ya hemos aprendido. Esta tabla se usará como base para construir los gráficos con el paquete `{ggplot2}`.\n\nEste paquete funciona por capas: cada capa agrega elementos o configuraciones al gráfico. Empezaremos con una estructura básica para generar gráficos de barras, uniendo las capas con el símbolo `+`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_bars <- df %>%\n  count(`Tipo filme`) %>% \n  mutate(pct = n / sum(n) * 100)\n\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct)) + # <1>\n  geom_col() # <2>\n```\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  En la función `ggplot` existe el argumento `data` donde ingresamos nuestro objeto `tab_bars`. Los elementos que deseamos graficar van en la función `aes`.\n2.  Indicamos el tipo de gráfico con `geom_col()`.\n\nProbemos añadir más capas para personalizar el gráfico y hacerlo más visualmente claro y llamativo\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct)) + # <1>\n  geom_col(fill = \"steelblue\") + # <2>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <3>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  theme_minimal() # <4>\n```\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `tab_bars`. Los elementos que deseamos graficar van en la función `aes`.\n2.  Indicamos el tipo de gráfico con `geom_col()`. Agregamos el argumento `fill` para indicar el color que rellenará las barras.\n3.  Con `labs` (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\n4.  `theme_minimal` nos da una visualización más limpia quitando el fondo gris.\n\nLa versatilidad de `{ggplot2}` nos permite personalizar distintas combinaciones.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct, fill = `Tipo filme`)) + # <1>\n  geom_col() + # <2>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <3>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  coord_flip() + # <4>\n  theme_minimal() + # <5>\n  scale_fill_brewer(palette = \"Set3\") # <6>\n```\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `tab_bars`. Los elementos que deseamos graficar van en la función `aes`.\n2.  Indicamos el tipo de gráfico con `geom_col()`.\n3.  Con `labs` (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\n4.  `coord_flip` gira los ejes para darnos barras horizontales.\n5.  `theme_minimal` nos da una visualización más limpia quitando el fondo gris.\n6.  En `scale_fill_brewer` indicamos una paleta de colores para usar.\n\nTambién podemos cruzar variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df %>% \n  mutate(Nota_cat =  # <1>\n           case_when(Nota < 5 ~ \"Menos de 5\",\n                     Nota >= 5 ~ \"5 a más\",\n                     is.na(Nota) ~ \"Sin nota\"),\n         Nota_cat = # <2>\n           factor(Nota_cat, \n                  levels = c(\"Sin nota\", \"5 a más\", \"Menos de 5\"),\n                  ordered = TRUE))\n\ntab_bars2 <- df2 %>%\n  group_by(`Tipo filme`) %>% # <3>\n  count(Nota_cat) %>% \n  mutate(pct = round(n / sum(n) * 100, 0))\n\nggplot(tab_bars2, aes(x = `Tipo filme`, y = pct, fill = Nota_cat)) + # <4>\n  geom_col() + # <5>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <6>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) + # <7>\n  theme_minimal() + # <8>\n  scale_fill_brewer(palette = \"Set3\") # <9>\n```\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Creamos una variable categórica a partir de `Nota` con `mutate` y `case_when`.\n2.  Volvemos nuestra variable `Nota_cat` un factor ordenado para ordenar las categorías.\n3.  Creamos nuestra tabla y añadimos la función `group_by` para calcular las frecuencias de `Nota_cat` dentro de cada tipo de filme.\n4.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `tab_bars2`. Los elementos que deseamos graficar van en la función `aes`. Añadimos en `aes` el argumento `fill` para colorear individualmente cada categoría de `Nota_cat`.\n5.  Indicamos el tipo de gráfico con `geom_col()`.\n6.  Con `labs` (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\n7.  `geom_text` sirve para colocar las etiquetas de los valores.\n8.  `theme_minimal` nos da una visualización más limpia quitando el fondo gris.\n9.  En `scale_fill_brewer` indicamos una paleta de colores para usar.\n\n## Histograma\n\n¿Qué variable podemos representar con un histograma?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = Año)) + # <1>\n  geom_histogram(fill = \"steelblue\") + # <2>\n  labs(title = \"Gráfico 2: Año de estreño de filmes\", # <3>\n       x = \"Año\",\n       y = \"Frecuencia\") +\n  theme_minimal() # <4>\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `df` y los elementos que deseamos graficar en la función `aes` (solamente usamos el argumento `x` en este caso).\n2.  Indicamos el tipo de gráfico con `geom_histogram()`. Agregamos el argumento `fill` para indicar el color que rellenará las barras.\n3.  Con `labs` (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\n4.  `theme_minimal` nos da una visualización más limpia quitando el fondo gris.\n\nUna capa que nos permite cruzar la información para una visualización desagregada es `facet_wrap`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = Año)) + # <1>\n  geom_histogram(fill = \"steelblue\") + # <2>\n  facet_wrap(~ `Tipo filme`, scales = \"free\") +  # <3> \n  labs(title = \"Gráfico 2: Año de estreño de filmes\", # <4>\n       x = \"Año\",\n       y = \"Cantidad\") +\n  theme_minimal() # <5>\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `df` y los elementos que deseamos graficar en la función `aes` (solamente usamos el argumento `x` en este caso).\n2.  Indicamos el tipo de gráfico con `geom_histogram()`. Agregamos el argumento `fill` para indicar el color que rellenará las barras.\n3.  Esta función divide en facetas por grupo. Colocamos la variable de grupos después del símbolo `~`.\n4.  Con `labs` (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\n5.  `theme_minimal` nos da una visualización más limpia quitando el fondo gris.\n\n## Box Plot\n\n¿Qué variable podemos representar con un *box plot*?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(y = Nota, x = `Tipo filme`, fill = `Tipo filme`)) + # <1>\n  geom_boxplot(show.legend = F) + # <2>\n  scale_fill_brewer(palette = \"Set3\") # <3>\n```\n\n::: {.cell-output-display}\n![](semana11_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n1.  Dentro de la función `ggplot`, ingresamos en el argumento `data` nuestro objeto `df`. Los elementos que deseamos graficar van en la función `aes`.\n2.  Indicamos el tipo de gráfico con `geom_boxplot()`. Ocultamos la leyenda con `F` en el argumento `show.legend`.\n3.  En `scale_fill_brewer` indicamos una paleta de colores para usar.\n\n# Exportación de gráficos\n\nFinalmente, para exportar gráficos, se puede utilizar la siguiente función también en `{ggplot2}`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot(df, aes(y = Nota, x = `Tipo filme`)) + # <1>\n  geom_boxplot()\n\nggsave(\"outputs/boxplot.png\", plot)  # <2>\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\n\n\n1.  Asignamos el gráfico al objeto `plot`.\n2.  Exportamos el plot.\n\n# Ejercicio final\n\nResponde las siguientes preguntas a partir de gráficos generados con `{ggplot2}`:\n\n1. ¿Cómo ha evolucionado la producción de filmes franceses a lo largo del tiempo? ¿Existen diferncias según tipo de filme? Representa visualmente la información y comenta la tendencia observada.\n2. ¿Cómo ha evolucionado la producción de filmes peruanos a lo largo del tiempo? ¿Existen diferncias según tipo de filme? Representa visualmente la información y comenta la tendencia observada.\n",
    "supporting": [
      "semana11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}